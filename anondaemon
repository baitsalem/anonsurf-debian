#!/bin/bash

### BEGIN INIT INFO
# PUT THIS SCRIPT INSIDE /etc/anonsurf/ AS DAEMON SCRIPT
# Provides:          anonsurf
# Required-Start:
# Required-Stop:
# Should-Start:
# Default-Start:
# Default-Stop:
# Short-Description: Transparent Proxy through TOR.
### END INIT INFO
#
# Devs:
# Lorenzo 'Palinuro' Faletra <palinuro@parrotsec.org>
# Lisetta 'Sheireen' Ferrero <sheireen@autistiche.org>
# Francesco 'Mibofra' Bonanno <mibofra@parrotsec.org>
#
# Maintainer:
# Nong Hoang 'DmKnght' Tu <dmknght@parrotsec.org>
#
# Extended:
# Daniel 'Sawyer' Garcia <dagaba13@gmail.com>
#
# Modified:
# boussad ait salem  <baitsalem@gmail.com>
#
# anonsurf is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
# You can get a copy of the license at www.gnu.org/licenses
#
# anonsurf is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Parrot Security OS. If not, see <http://www.gnu.org/licenses/>.

export BLUE='\033[1;94m'
export GREEN='\033[1;92m'
export RED='\033[1;91m'
export RESETCOLOR='\033[1;00m'


# Destinations you don't want routed through Tor
TOR_EXCLUDE="192.168.0.0/16 172.16.0.0/12 10.0.0.0/8"

# The UID Tor runs as
# change it if, starting tor, the command 'ps -e | grep tor' returns a different UID
TOR_UID="debian-tor"

# Tor's TransPort
TOR_PORT="9040"


function disableService {
	if [ ! -e /tmp/tor.pid ]; then
		echo -e " $RED*$BLUE Tor is not running! $GREEN starting it $BLUE for you" >&2
		echo -e -n "\n $GREEN*$BLUE Stopping service nscd"
		/usr/sbin/service nscd stop 2>/dev/null || echo " (already stopped)"
		echo -e -n "\n $GREEN*$BLUE Stopping service resolvconf"
		/usr/sbin/service resolvconf stop 2>/dev/null || echo " (already stopped)"
		echo -e -n "\n $GREEN*$BLUE Stopping service dnsmasq"
		/usr/sbin/service dnsmasq stop 2>/dev/null || echo " (already stopped)"
		killall dnsmasq nscd resolvconf 2>/dev/null || true
		sleep 2
		killall -9 dnsmasq 2>/dev/null || true
	fi
}


function enableService {
	echo -e -n "\ $GREEN*$BLUE Restarting services\n"
	/usr/sbin/service resolvconf start || service resolvconf restart || true
	/usr/sbin/service dnsmasq start || true
	/usr/sbin/service nscd start || true
	echo -e " $GREEN*$BLUE It is safe to not worry for dnsmasq and nscd start errors if they are not installed or started already."
	sleep 1
}


function start {
	
	#/usr/bin/tor --defaults-torrc /usr/share/tor/tor-service-defaults-torrc -f /etc/tor/torrc --RunAsDaemon 0 &
	systemctl start tor
	
	sleep 3

	if ! [ -f /etc/network/iptables.rules ]; then
		/usr/sbin/iptables-save > /etc/network/iptables.rules
		echo -e "\n $GREEN*$BLUE Saved iptables rules\n"
	fi

	/usr/sbin/iptables -F
	/usr/sbin/iptables -t nat -F

	mv /etc/resolv.conf /etc/resolv.conf.bak
	echo -e 'nameserver 127.0.0.1' > /etc/resolv.conf
	echo -e " $GREEN*$BLUE Modified resolv.conf to use Tor and ParrotDNS/OpenNIC\n"

	# disable ipv6
	echo -e " $GREEN*$BLUE Disabling IPv6 for security reasons\n"
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=1
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=1

	# set iptables nat
	echo -e " $GREEN*$BLUE Configuring iptables rules to route all traffic through tor\n"
	/usr/sbin/iptables -t nat -A OUTPUT -m owner --uid-owner $TOR_UID -j RETURN

	#set dns redirect
	echo -e " $GREEN*$BLUE Redirecting DNS traffic through tor\n"
	/usr/sbin/iptables -t nat -A OUTPUT -p udp --dport 53 -j REDIRECT --to-ports 53
	/usr/sbin/iptables -t nat -A OUTPUT -p tcp --dport 53 -j REDIRECT --to-ports 53
	/usr/sbin/iptables -t nat -A OUTPUT -p udp -m owner --uid-owner $TOR_UID -m udp --dport 53 -j REDIRECT --to-ports 53

	#resolve .onion domains mapping 10.192.0.0/10 address space
	/usr/sbin/iptables -t nat -A OUTPUT -p tcp -d 10.192.0.0/10 -j REDIRECT --to-ports $TOR_PORT
	/usr/sbin/iptables -t nat -A OUTPUT -p udp -d 10.192.0.0/10 -j REDIRECT --to-ports $TOR_PORT

	#exclude local addresses
	for NET in $TOR_EXCLUDE 127.0.0.0/9 127.128.0.0/10; do
		/usr/sbin/iptables -t nat -A OUTPUT -d $NET -j RETURN
		/usr/sbin/iptables -A OUTPUT -d "$NET" -j ACCEPT
	done

	#redirect all other output through TOR
	/usr/sbin/iptables -t nat -A OUTPUT -p tcp --syn -j REDIRECT --to-ports $TOR_PORT
	/usr/sbin/iptables -t nat -A OUTPUT -p udp -j REDIRECT --to-ports $TOR_PORT
	/usr/sbin/iptables -t nat -A OUTPUT -p icmp -j REDIRECT --to-ports $TOR_PORT

	#accept already established connections
	/usr/sbin/iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

	#allow only tor output
	echo -e " $GREEN*$BLUE Allowing only tor to browse in clearnet\n"
	/usr/sbin/iptables -A OUTPUT -m owner --uid-owner $TOR_UID -j ACCEPT
	/usr/sbin/iptables -A OUTPUT -j REJECT
	sleep 2
}


function stop {
	/usr/sbin/iptables -F
	/usr/sbin/iptables -t nat -F
	echo -e "\n $GREEN*$BLUE Deleted all iptables rules"

	if [ -f /etc/network/iptables.rules ]; then
		/usr/sbin/iptables-restore < /etc/network/iptables.rules
		rm /etc/network/iptables.rules
		echo -e "\n $GREEN*$BLUE Iptables rules restored"
	fi
	echo -e -n "\n $GREEN*$BLUE Restore DNS service"
	rm /etc/resolv.conf || true
	mv /etc/resolv.conf.bak /etc/resolv.conf || true
	# ln -s /etc/resolvconf/run/resolv.conf /etc/resolv.conf || true

	# re-enable ipv6
	/sbin/sysctl -w net.ipv6.conf.all.disable_ipv6=0
	/sbin/sysctl -w net.ipv6.conf.default.disable_ipv6=0
	
	systemctl stop tor
	
	sleep 1
	killall tor
	sleep 1
}


case "$1" in
	start)
		disableService
		start
	;;
	stop)
		stop
		enableService
	;;
	restart)
		$0 stop
		sleep 1
		$0 start
	;;
	*)
	esac
